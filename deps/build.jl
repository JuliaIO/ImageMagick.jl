using BinaryProvider # requires BinaryProvider 0.3.0 or later


dependencies = [
    "build_Zlib.v1.2.11.jl",
    "build_libpng.v1.0.0.jl",
    "build_libjpeg.v9.0.0-b.jl",
    "build_libtiff.v4.0.9.jl"
]

for elem in dependencies
    # it's a bit faster to run the build in an anonymous module instead of
    # starting a new julia process
    m = Module(:__anon__)
    eval(m, :(include($(joinpath(@__DIR__, elem)))))
end

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libMagickWand"], :libwand),
]
# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaIO/ImageMagickBuilder/releases/download/v6.9.10-4"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/ImageMagick.v6.9.10-4.aarch64-linux-gnu.tar.gz", "cc170a057522fd149bdf7d65c1d27f70d45939e7e55d61be90f3c135f7b10080"),
    Linux(:aarch64, :musl) => ("$bin_prefix/ImageMagick.v6.9.10-4.aarch64-linux-musl.tar.gz", "ccdc95d46c5e0412d754138f7508f59cda0b93ea31c7edcf300dc37f9aaf172c"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/ImageMagick.v6.9.10-4.arm-linux-gnueabihf.tar.gz", "6373eab42d3866ae7618ab2d6ed459265f8eda71fbd06466c25c4a36f938509c"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/ImageMagick.v6.9.10-4.arm-linux-musleabihf.tar.gz", "249b64e55165a2a9fdc5ed805d8682ed8bebb1d54d0b2e2af1860002e73a8d10"),
    Linux(:i686, :glibc) => ("$bin_prefix/ImageMagick.v6.9.10-4.i686-linux-gnu.tar.gz", "634f1c8eac84d34ecd2def7cec19835fe5d1d696157acffccd751b9e6214d889"),
    Linux(:i686, :musl) => ("$bin_prefix/ImageMagick.v6.9.10-4.i686-linux-musl.tar.gz", "acf52b51eef9c839e5e4b8e3a8fa77c5ded1be4be0628f85f55cdad90bb8771d"),
    Windows(:i686) => ("$bin_prefix/ImageMagick.v6.9.10-4.i686-w64-mingw32.tar.gz", "06d7bb43cab8b6d760290040f6382160409d0187fe7a71ece32bc4fb6333995d"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/ImageMagick.v6.9.10-4.powerpc64le-linux-gnu.tar.gz", "40399f265034d7aa0c522057af001e437da50b50aa23c739c4fd38b6185da5f9"),
    MacOS(:x86_64) => ("$bin_prefix/ImageMagick.v6.9.10-4.x86_64-apple-darwin14.tar.gz", "8b0461ded10b9ce04baae7271feb610f25673abc43d555b9a6651a4c127bbf41"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/ImageMagick.v6.9.10-4.x86_64-linux-gnu.tar.gz", "06bae488abadea7e325cf75766cd67574ec3ccd54ae064675efb5b2a89f54eac"),
    Linux(:x86_64, :musl) => ("$bin_prefix/ImageMagick.v6.9.10-4.x86_64-linux-musl.tar.gz", "01ba7e01ae965f75b752206d994c52946d24241c5a8c0668e6d9407de6239a77"),
    FreeBSD(:x86_64) => ("$bin_prefix/ImageMagick.v6.9.10-4.x86_64-unknown-freebsd11.1.tar.gz", "c33ad0f46ede198bd16459d20d741ec65153e05b9ddd637907567c574a157ed8"),
    Windows(:x86_64) => ("$bin_prefix/ImageMagick.v6.9.10-4.x86_64-w64-mingw32.tar.gz", "76bec9d440d8dd51395901e39405cac6e6c047f2a077a3590a96fe6847565fe2"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

for elem in readdir(joinpath(products[1].prefix, "lib"))
    path = joinpath(products[1].prefix, "lib", elem)
    if contains(elem, "libMagickWand")
        try
            Libdl.dlopen(path)
            info("Able to load $elem")
        catch e
            println("error with $elem")
            println(e)
        end
    end
end
# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
