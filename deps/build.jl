using BinaryProvider # requires BinaryProvider 0.3.0 or later


dependencies = [
    "build_Zlib.v1.2.11.jl",
    "build_libpng.v1.0.1.jl",
    "build_libjpeg.v9.0.0-b.jl",
    "build_libtiff.v4.0.9.jl"
]

for elem in dependencies
    # it's a bit faster to run the build in an anonymous module instead of
    # starting a new julia process
    m = Module(:__anon__)
    Core.include(m, (joinpath(@__DIR__, elem)))
end

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libMagickWand"], :libwand),
]
# Download binaries from hosted location
version = v"6.9.10-10"
bin_prefix = "https://github.com/JuliaIO/ImageMagickBuilder/releases/download/v$version"

# Listing of files generated by BinaryBuilder:

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/ImageMagick.v6.9.10-10.aarch64-linux-gnu.tar.gz", "50809b9ad03f527998acb00d53ec647964c759282e0828d8e5123a3f30ad0a0f"),
    Linux(:aarch64, :musl) => ("$bin_prefix/ImageMagick.v6.9.10-10.aarch64-linux-musl.tar.gz", "24e6198bcb3ed639e815bb422c2681721052cb4212ceb2bfe509e155d9610c83"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/ImageMagick.v6.9.10-10.arm-linux-gnueabihf.tar.gz", "636872cd4a3c4078490164596258d13cddad52fef455e1fc45a8856893bd29d3"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/ImageMagick.v6.9.10-10.arm-linux-musleabihf.tar.gz", "d0c7c882fd4351b1f5f5a655047a193e07c1863dd9d6978b792c76c16d3b359c"),
    Linux(:i686, :glibc) => ("$bin_prefix/ImageMagick.v6.9.10-10.i686-linux-gnu.tar.gz", "9aa4fa4dd5a38cad9d0e99cb73dbbba839abd80222641ca997816ea4881a68cb"),
    Linux(:i686, :musl) => ("$bin_prefix/ImageMagick.v6.9.10-10.i686-linux-musl.tar.gz", "606dcdc8964db83c48ab669c1ac482fa726a728a73f9806ac88bdac3029703fa"),
    Windows(:i686) => ("$bin_prefix/ImageMagick.v6.9.10-10.i686-w64-mingw32.tar.gz", "cf28050759ff1fe56928449110206a23d5313a26bdab778737bc63640c1eefc0"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/ImageMagick.v6.9.10-10.powerpc64le-linux-gnu.tar.gz", "c83b2c9b5ab711d2a54643358017cbd0e29dd8ca9d6e6df81915d1ad82a1c400"),
    MacOS(:x86_64) => ("$bin_prefix/ImageMagick.v6.9.10-10.x86_64-apple-darwin14.tar.gz", "2299a8df97f91e60a8e070439276b8dfea926644bd93e3c9940560989e16e005"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/ImageMagick.v6.9.10-10.x86_64-linux-gnu.tar.gz", "3bcfb55798ef8ebdd291990febac393157c246163053b2504bc3637a162e05dd"),
    Linux(:x86_64, :musl) => ("$bin_prefix/ImageMagick.v6.9.10-10.x86_64-linux-musl.tar.gz", "8b2832b290aa2296fe78bca165fdd2a59c598d730f76227d82882a13d30511bd"),
    FreeBSD(:x86_64) => ("$bin_prefix/ImageMagick.v6.9.10-10.x86_64-unknown-freebsd11.1.tar.gz", "b31be069da6d3020ceeb4ce30e3e262bb784adfbcdfb67637f46b99ef9e396b6"),
    Windows(:x86_64) => ("$bin_prefix/ImageMagick.v6.9.10-10.x86_64-w64-mingw32.tar.gz", "c81df1c8adcd4facda669d8d1277af438f90bdcb61aa17da6d59e1566e9e0ae6"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps_im.jl"), products)

function include_deps(name)
    """
    module $name
        import Libdl
        path = joinpath(@__DIR__, $(repr(string("deps_", name, ".jl"))))
        isfile(path) || error("$name wasn't build correctly. Please run Pkg.build(\\\"ImageMagick\\\")")
        include(path)
    end
    using .$name
    """
end

open("deps.jl", "w") do io
    for dep in (:zlib, :png, :jpeg, :tiff, :im)
        println(io, include_deps(dep))
    end
    println(io, """
    libversion() = $(repr(version))
    const libwand = im.libwand

    function check_deps()
        zlib.check_deps()
        png.check_deps()
        jpeg.check_deps()
        tiff.check_deps()
        im.check_deps()
    end
    """)
end
